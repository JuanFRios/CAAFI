import { Component, OnInit, Inject } from '@angular/core';
import { Usuario } from '../../comun/usuario';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import {
  ActivatedRoute,
  Router,
  NavigationExtras
} from '@angular/router';
import { Location } from '@angular/common';
//import { LoginService } from '../../servicios/login.service';
//import { EmisorService } from '../../servicios/emisor.service';
//import { ERRORES_FORMULARIOS, MENSAJES_VALIDACION } from './validacion';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {

  formIncioSesion: FormGroup;
  nombre_usuario: string;
  clave: string;
  erroresFormulario = ERRORES_FORMULARIOS;
  mensajesValidacion = MENSAJES_VALIDACION;
  errMess: string;
  cargando = false;

  constructor(){
  }

  ngOnInit() {
  }

  crearFormulario(): void {
    this.formIncioSesion = this.fb.group({
      nombre_usuario: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(100)]],
      clave: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(100)]],
    });

    this.formIncioSesion.valueChanges
      .subscribe(data => this.onValueChanged(data));

    this.onValueChanged();
  }

  /**
   * Método encargado de validar si el valor ingresado a un input
   * contiene errores.
   * El ? indica que el parámetro es opcional
   * @param data : opcional
   */
  onValueChanged(data?: any) {
    // Si el formulario no ha sido creado retorna nada
    if (!this.formIncioSesion) { return; }
    const form = this.formIncioSesion;

    // tslint:disable-next-line:forin
    for (const campo in this.erroresFormulario) {
      // Nos encargamos de resetear el error para volver a identificar si hay
      this.erroresFormulario[campo] = '';
      // Obtenemos el input del formulario por el nombre
      const control = form.get(campo);
      // Si control no es null, hubo cambios y no es valido
      if (control && control.dirty && !control.valid) {
        // Buscamos los mensajes de error para el input
        const messages = this.mensajesValidacion[campo];
        // recorremos el arreglo de errores del input
        // tslint:disable-next-line:forin
        for (const key in control.errors) {
          // Se concatenan los mensajes de errores
          this.erroresFormulario[campo] += messages[key] + ' ';

        }
      }
    }

  }

  onSubmit() {
    this.cargando = true;
    this.nombre_usuario = this.formIncioSesion.get('nombre_usuario').value;
    this.clave = this.formIncioSesion.get('clave').value;

    this.loginServicio.autenticar(this.nombre_usuario, this.clave)
      .subscribe(usuario => {
        this.loginServicio.esSesionIniciada = true;
        this.loginServicio.usuario = this.mapearUsuarioLogueado(usuario);
        this.emisorServicio.cambiarModuloActivo("Formularios");
        // Get the redirect URL from our auth service
        // If no redirect has been set, use the default
        let redirect = this.loginServicio.redirectUrl ? this.loginServicio.redirectUrl : '/formularios';

        // Set our navigation extras object
        // that passes on our global query params and fragment
        let navigationExtras: NavigationExtras = {
          queryParamsHandling: 'preserve',
          preserveFragment: true
        };

        // Redirect the user
        this.router.navigate([redirect], navigationExtras);
      }, error => {
        if (error.codigoError = 404) {
          this.errMess = "Usuario o contraseña inválidos.";
        }
        // Volvemos el formulario a su estado original
        this.formIncioSesion.reset();
        this.cargando = false;
      });

  }

  /**
    * Este método se crea para mapear el usuario obtenido al loguearse.
    * cuando se crea el usuario lo retorna con información adicional, entonces hay que mapear 
    * solo los campos de la tabla Usuario
    */
  mapearUsuarioLogueado(usuario: Usuario): Usuario {
    let usuario_logueado = new Usuario();
    usuario_logueado.id = usuario.id;
    usuario_logueado.clave = usuario.clave;
    usuario_logueado.email = usuario.email;
    usuario_logueado.estado = usuario.estado;
    usuario_logueado.identificacion = usuario.identificacion;
    usuario_logueado.idRol = usuario.idRol;
    usuario_logueado.nombres = usuario.nombres;
    usuario_logueado.usuario = usuario.usuario;
    return usuario_logueado;
  }

}
